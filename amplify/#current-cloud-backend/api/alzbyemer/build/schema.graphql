type User {
  id: ID!
  username: String!
  email: String
  emailVerified: Boolean
  age: String
  gender: String
  ethnicity: String
  familyHistory: Boolean
  smoking: Boolean
  highBloodPressure: Boolean
  diabetes: Boolean
  height: Int
  weight: Int
  profileScore: Int
  riskScore: Int
  assessmentScore: Int
  todos: [Todo]
  physicals(filter: ModelPhysicalFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPhysicalConnection
  cognitives(filter: ModelCognitiveFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCognitiveConnection
}

type Physical {
  id: ID!
  createAt: String
  date: String
  score: Int
  user: User
}

type Cognitive {
  id: ID!
  createdAt: String
  type: String
  difficulty: String
  solved: Int
  total: Int
  user: User
}

enum TodoType {
  PHYSICAL
  COGNITIVE
}

type Todo {
  type: TodoType
  createdAt: String
  isCompleted: Boolean
}

input TodoInput {
  type: TodoType
  createdAt: String
  isCompleted: Boolean
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelUserFilterInput {
  id: ModelIDFilterInput
  username: ModelStringFilterInput
  email: ModelStringFilterInput
  emailVerified: ModelBooleanFilterInput
  age: ModelStringFilterInput
  gender: ModelStringFilterInput
  ethnicity: ModelStringFilterInput
  familyHistory: ModelBooleanFilterInput
  smoking: ModelBooleanFilterInput
  highBloodPressure: ModelBooleanFilterInput
  diabetes: ModelBooleanFilterInput
  height: ModelIntFilterInput
  weight: ModelIntFilterInput
  profileScore: ModelIntFilterInput
  riskScore: ModelIntFilterInput
  assessmentScore: ModelIntFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getPhysical(id: ID!): Physical
  listPhysicals(filter: ModelPhysicalFilterInput, limit: Int, nextToken: String): ModelPhysicalConnection
  getCognitive(id: ID!): Cognitive
  listCognitives(filter: ModelCognitiveFilterInput, limit: Int, nextToken: String): ModelCognitiveConnection
}

input CreateUserInput {
  id: ID
  username: String!
  email: String
  emailVerified: Boolean
  age: String
  gender: String
  ethnicity: String
  familyHistory: Boolean
  smoking: Boolean
  highBloodPressure: Boolean
  diabetes: Boolean
  height: Int
  weight: Int
  profileScore: Int
  riskScore: Int
  assessmentScore: Int
  todos: [TodoInput]
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
  emailVerified: Boolean
  age: String
  gender: String
  ethnicity: String
  familyHistory: Boolean
  smoking: Boolean
  highBloodPressure: Boolean
  diabetes: Boolean
  height: Int
  weight: Int
  profileScore: Int
  riskScore: Int
  assessmentScore: Int
  todos: [TodoInput]
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createPhysical(input: CreatePhysicalInput!): Physical
  updatePhysical(input: UpdatePhysicalInput!): Physical
  deletePhysical(input: DeletePhysicalInput!): Physical
  createCognitive(input: CreateCognitiveInput!): Cognitive
  updateCognitive(input: UpdateCognitiveInput!): Cognitive
  deleteCognitive(input: DeleteCognitiveInput!): Cognitive
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreatePhysical: Physical @aws_subscribe(mutations: ["createPhysical"])
  onUpdatePhysical: Physical @aws_subscribe(mutations: ["updatePhysical"])
  onDeletePhysical: Physical @aws_subscribe(mutations: ["deletePhysical"])
  onCreateCognitive: Cognitive @aws_subscribe(mutations: ["createCognitive"])
  onUpdateCognitive: Cognitive @aws_subscribe(mutations: ["updateCognitive"])
  onDeleteCognitive: Cognitive @aws_subscribe(mutations: ["deleteCognitive"])
}

type ModelPhysicalConnection {
  items: [Physical]
  nextToken: String
}

input ModelPhysicalFilterInput {
  id: ModelIDFilterInput
  createAt: ModelStringFilterInput
  date: ModelStringFilterInput
  score: ModelIntFilterInput
  and: [ModelPhysicalFilterInput]
  or: [ModelPhysicalFilterInput]
  not: ModelPhysicalFilterInput
}

input CreatePhysicalInput {
  id: ID
  createAt: String
  date: String
  score: Int
  physicalUserId: ID
}

input UpdatePhysicalInput {
  id: ID!
  createAt: String
  date: String
  score: Int
  physicalUserId: ID
}

input DeletePhysicalInput {
  id: ID
}

type ModelCognitiveConnection {
  items: [Cognitive]
  nextToken: String
}

input ModelCognitiveFilterInput {
  id: ModelIDFilterInput
  createdAt: ModelStringFilterInput
  type: ModelStringFilterInput
  difficulty: ModelStringFilterInput
  solved: ModelIntFilterInput
  total: ModelIntFilterInput
  and: [ModelCognitiveFilterInput]
  or: [ModelCognitiveFilterInput]
  not: ModelCognitiveFilterInput
}

input CreateCognitiveInput {
  id: ID
  createdAt: String
  type: String
  difficulty: String
  solved: Int
  total: Int
  cognitiveUserId: ID
}

input UpdateCognitiveInput {
  id: ID!
  createdAt: String
  type: String
  difficulty: String
  solved: Int
  total: Int
  cognitiveUserId: ID
}

input DeleteCognitiveInput {
  id: ID
}
